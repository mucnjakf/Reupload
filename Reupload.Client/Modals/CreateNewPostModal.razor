<div class="container">
    <h3>Create new post</h3>
    <hr/>

    <Error ShowErrors="ShowErrors" Errors="Errors"/>

    <EditForm Model="@PostInsertVm" OnValidSubmit="@InsertAsync">
        <div class="row mb-3">
            @if (PostInsertVm.Base64Image is not null)
            {
                <img src="data:@PostInsertVm.ContentType;base64,@PostInsertVm.Base64Image"
                     style="height: 400px; object-fit: cover;" alt="Uploaded image"/>
            }

            <div class="input-group p-0 mt-3">
                <InputFile class="form-control" id="inputImage" OnChange="OnInputImageChangeAsync" accept="image/jpg, image/jpeg, image/png, image/bmp" required/>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col px-0">
                <div class="form-floating">
                    <InputTextArea type="text" class="form-control" id="txtDescription" placeholder="Description" @bind-Value="@PostInsertVm.Description"/>
                    <label for="txtDescription">Description</label>
                </div>
            </div>
        </div>

        <div class="row mb-1 d-flex">
            @foreach (string hashtag in Hashtags)
            {
                <span class="badge bg-primary mx-1 mb-1" style="width: 5rem; cursor: pointer;" @onclick="() => RemoveHashtag(hashtag)">#@hashtag</span>
            }

            @if (Hashtags.Any())
            {
                <p class="text-danger small p-0 mt-1 mb-0">Click on the hashtag badge to delete.</p>
            }
        </div>

        <div class="row mb-3">
            <div class="col-10 px-0">
                <div class="form-floating">
                    <input type="text" class="form-control" id="txtHashtag" placeholder="Hashtag" @bind="Hashtag"/>
                    <label for="txtHashtag">Hashtag</label>
                </div>
            </div>
            <div class="col-2" style="padding-right: 0">
                <button type="button" class="btn btn-primary h-100 w-100" @onclick="AddHashtag">Add</button>
            </div>
        </div>

        <hr/>
        <button class="btn btn-primary" type="submit" disabled="@DisableConfirm">Confirm</button>
        <button class="btn btn-secondary" type="button" @onclick="CancelAsync">Cancel</button>
    </EditForm>
</div>

@code {

    [Inject]
    public IPostApiService PostApiService { get; set; } = default!;

    [CascadingParameter]
    private BlazoredModalInstance BlazoredModalInstance { get; set; } = default!;

    private PostInsertVm PostInsertVm { get; set; } = new();

    private string? Hashtag { get; set; }

    private List<string> Hashtags { get; set; } = new();

    private bool DisableConfirm { get; set; } = false;

    private bool ShowErrors { get; set; }

    private List<string> Errors { get; } = new();

    private void AddHashtag()
    {
        if (!string.IsNullOrWhiteSpace(Hashtag))
        {
            Hashtags.Add(Hashtag);
            Hashtag = null;
        }
    }

    private void RemoveHashtag(string hashtag)
    {
        Hashtags.Remove(hashtag);
    }

    private async Task OnInputImageChangeAsync(InputFileChangeEventArgs e)
    {
        ShowErrors = true;
        Errors.Clear();
        DisableConfirm = false;

        try
        {
            IBrowserFile imageFile = e.GetMultipleFiles()[0];

            IBrowserFile resizedImageFile = await imageFile.RequestImageFileAsync(imageFile.ContentType, 1920, 1080);
            byte[] buffer = new byte[resizedImageFile.Size];

            await using (Stream stream = resizedImageFile.OpenReadStream())
            {
                int _ = await stream.ReadAsync(buffer);
            }

            PostInsertVm.Base64Image = Convert.ToBase64String(buffer);
            PostInsertVm.ContentType = imageFile.ContentType;
            PostInsertVm.FileName = imageFile.Name;
        }
        catch (Exception)
        {
            Errors.Add("Selected image is invalid.");
            ShowErrors = true;
            DisableConfirm = true;
        }
    }

    private async Task InsertAsync()
    {
        PostInsertVm.Hashtags = Hashtags
            .Select(hashtag => new PostHashtagVm { Text = hashtag })
            .ToList();

        ShowErrors = true;
        Errors.Clear();

        EmptyResponseVm emptyResponseVm = await PostApiService.InsertAsync(PostInsertVm);

        if (emptyResponseVm.Success)
        {
            await BlazoredModalInstance.CloseAsync();
            return;
        }

        ShowErrors = true;
        Errors.AddRange(emptyResponseVm.Errors);
    }

    private async Task CancelAsync()
    {
        await BlazoredModalInstance.CancelAsync();
    }

}